---
title: "gvc_agora_opentargets"
format:
  html:
    df-print: paged
    toc: true
execute: 
  warning: false
---

## Setup environment

```{r}
#| output: false
library(tidyverse)
library(janitor)
library(broom)
library(readxl)
library(jsonlite)

library(gprofiler2)

theme_set(theme_bw())

set.seed(666)
```

## Read and prep data

### GVC

Genes within 1Mb window of (each side of?) GVC loci from Fanny:

```{r}
gvc <- read_xlsx("GVC_1Mb_comparison_050224.xlsx") %>%
  clean_names() %>% 
  separate(gene_id, c("gene_id", "version")) %>%
  select(-version, -agora_nominated_list, -opentarget_info)

gvc
```

```{r}
gvc.genes <- gvc %>% distinct(gene_id, .keep_all = TRUE) %>% select(gene_id, gene_symbol) %>% arrange(gene_symbol)

gvc.genes
```

### Agora

Alzheimer's disease gene prioritization scores from [Agora](https://www.synapse.org/Synapse:syn25741025) (see also related [journal article](https://alz-journals.onlinelibrary.wiley.com/doi/10.1002/trc2.12461)):

```{r}
ago1 <- read_json("agora.syn25741025.overall_scores.v12.2024-10-24.json", simplifyVector = TRUE) %>% as_tibble()

ago1
```

Alzheimer's disease genes (Agora nominated targets):

https://agora.adknowledgeportal.org/genes/nominated-targets

```{r}
ago2 <- read_csv("agora.nominated-targets.gene-list.2024-10-24.csv")
ago2
```

```{r}
ago <- ago1 %>% filter(hgnc_symbol %in% ago2$`Gene Symbol`)
```

### OpenTargets

Alzheimer's disease gene prioritization scores from [OpenTargets](https://platform.opentargets.org/disease/MONDO_0004975/associations):

```{r}
# ot <- read_tsv("OT-MONDO_0004975-associated-targets-6_4_2024-v24_03.tsv", show_col_types = FALSE, na = "No data")

ot <- read_tsv("OT-MONDO_0004975-associated-targets-10_24_2024-v24_09.tsv", show_col_types = FALSE, na = "No data")

ot
```

Add Ensembl Gene IDs (WTF!):

```{r}
otcols <- colnames(ot)
otensg <- gconvert(
  query = ot$symbol,
  organism = "hsapiens",
  target= "ENSG",
  mthreshold = Inf,
  filter_na = TRUE) %>% 
  mutate(input_number = as.character(input_number)) %>%
  left_join(ot %>% rownames_to_column(var = "input_number"), by = "input_number") %>% 
  select(ensembl_gene_id = target, otcols)

otensg
```

## Correlation of Agora and OpenTargets scores

### GVC genes

```{r}
d.cor <- gvc.genes %>%
  left_join(ago, by = join_by(gene_id == ensembl_gene_id)) %>% 
  left_join(otensg, by = join_by(gene_id == ensembl_gene_id))
```

```{r}
d.cor %>% nrow()

d.cor %>% drop_na(genetics_score, otGeneticsPortal) %>% nrow()

d.cor %>% drop_na(genetics_score, otGeneticsPortal) %>%
  summarize(cor = tidy(cor.test(genetics_score, otGeneticsPortal, method="kendall"))) %>%
  unnest(cor)
```

```{r}
d.cor %>% nrow()

d.cor %>% drop_na(target_risk_score, globalScore) %>% nrow()

d.cor %>% drop_na(target_risk_score, globalScore) %>%
  summarize(cor = tidy(cor.test(target_risk_score, globalScore, method="kendall"))) %>%
  unnest(cor)
```

### All genes

```{r}
d.cor <- ago %>% 
  left_join(otensg, by = "ensembl_gene_id")
```

```{r}
d.cor %>% nrow()

d.cor %>% drop_na(genetics_score, otGeneticsPortal) %>% nrow()

d.cor %>% drop_na(genetics_score, otGeneticsPortal) %>%
  summarize(cor = tidy(cor.test(genetics_score, otGeneticsPortal, method="kendall"))) %>%
  unnest(cor)
```

```{r}
d.cor %>% nrow()

d.cor %>% drop_na(target_risk_score, globalScore) %>% nrow()

d.cor %>% drop_na(target_risk_score, globalScore) %>%
  summarize(cor = tidy(cor.test(target_risk_score, globalScore, method="kendall"))) %>%
  unnest(cor)
```

## Overlaps between GVC, Agora, and OpenTargets genes

```{r}
x = list(
  "GVC" = gvc.genes$gene_id,
  "Agora" = ago$ensembl_gene_id,
  "OpenTargets" = otensg$ensembl_gene_id
)
```

```{r}
#| fig-width: 6
#| fig-height: 6
library(VennDiagram)
grid.newpage()
v <- venn.diagram(
  x,
  fill = c("#FF0000", "#00FF00", "#0000FF"),
  filename = NULL)
grid.draw(v)
```

```{r}
p <- get.venn.partitions(x)
p
```

## ORA of genes in overlaps

### GVC ∩ Agora ∩ OpenTargets

```{r}
genes <- p %>% 
  filter(..set.. == "GVC∩Agora∩OpenTargets") %>%
  unnest(..values..) %>%
  select(gene_id = ..values..) %>%
  left_join(ago, by = join_by(gene_id == ensembl_gene_id)) %>% 
  left_join(otensg, by = join_by(gene_id == ensembl_gene_id)) %>%
  sample_frac(1L) %>% # randomize row order before arranging
  select(gene_id, symbol, genetics_score, otGeneticsPortal, globalScore, target_risk_score, multi_omics_score) %>%
  arrange(desc(genetics_score), desc(otGeneticsPortal))

genes
```

```{r}
query <- genes %>% distinct(gene_id) %>% pull(gene_id)

gostres <- gost(query = query,
                organism = "hsapiens",
                domain_scope = "annotated",
                exclude_iea = TRUE,
                ordered_query = TRUE,
                significant = TRUE,
                user_threshold = 0.005,
                correction_method = "gSCS")

gostres$result %>% select(term_name, term_id, source, everything())
```

```{r}
gostplot(gostres, capped = FALSE, interactive = TRUE)
```

```{r}
# save overlap gene ids for later
overlap_gene_ids <- query
```

### GVC ∩ Agora

```{r}
genes <- p %>% 
  filter(..set.. %in% c("GVC∩Agora∩OpenTargets", "(GVC∩Agora)∖(OpenTargets)")) %>%
  unnest(..values..) %>%
  select(gene_id = ..values..) %>%
  left_join(ago, by = join_by(gene_id == ensembl_gene_id)) %>% 
  left_join(otensg, by = join_by(gene_id == ensembl_gene_id)) %>% 
  sample_frac(1L) %>% # randomize row order before arranging
  select(gene_id, symbol, genetics_score, otGeneticsPortal, globalScore, target_risk_score, multi_omics_score) %>%
  arrange(desc(genetics_score), desc(otGeneticsPortal))

genes
```

```{r}
query <- genes %>% distinct(gene_id) %>% pull(gene_id)

gostres <- gost(query = query,
                organism = "hsapiens",
                domain_scope = "annotated",
                exclude_iea = TRUE,
                ordered_query = TRUE,
                significant = TRUE,
                user_threshold = 0.005,
                correction_method = "gSCS")

gostres$result %>% select(term_name, term_id, source, everything())
```

```{r}
gostplot(gostres, capped = FALSE, interactive = TRUE)
```

### GVC ∩ OpenTargets

```{r}
genes <- p %>% 
  filter(..set.. %in% c("GVC∩Agora∩OpenTargets", "(GVC∩OpenTargets)∖(Agora)")) %>%
  unnest(..values..) %>%
  select(gene_id = ..values..) %>%
  left_join(ago, by = join_by(gene_id == ensembl_gene_id)) %>% 
  left_join(otensg, by = join_by(gene_id == ensembl_gene_id)) %>% 
  sample_frac(1L) %>% # randomize row order before arranging
  select(gene_id, symbol, genetics_score, otGeneticsPortal, globalScore, target_risk_score, multi_omics_score) %>%
  arrange(desc(genetics_score), desc(otGeneticsPortal))

genes
```

```{r}
query <- genes %>% distinct(gene_id) %>% pull(gene_id)

gostres <- gost(query = query,
                organism = "hsapiens",
                domain_scope = "annotated",
                exclude_iea = TRUE,
                ordered_query = TRUE,
                significant = TRUE,
                user_threshold = 0.005,
                correction_method = "gSCS")

gostres$result %>% select(term_name, term_id, source, everything())
```

```{r}
gostplot(gostres, capped = FALSE, interactive = TRUE)
```

### Agora ∩ OpenTargets

```{r}
genes <- p %>% 
  filter(..set.. %in% c("GVC∩Agora∩OpenTargets", "(Agora∩OpenTargets)∖(GVC)")) %>%
  unnest(..values..) %>%
  select(gene_id = ..values..) %>%
  left_join(ago, by = join_by(gene_id == ensembl_gene_id)) %>% 
  left_join(otensg, by = join_by(gene_id == ensembl_gene_id)) %>% 
  sample_frac(1L) %>% # randomize row order before arranging
  select(gene_id, symbol, genetics_score, otGeneticsPortal, globalScore, target_risk_score, multi_omics_score) %>%
  arrange(desc(genetics_score), desc(otGeneticsPortal))

genes
```

```{r}
query <- genes %>% distinct(gene_id) %>% pull(gene_id)

gostres <- gost(query = query,
                organism = "hsapiens",
                domain_scope = "annotated",
                exclude_iea = TRUE,
                ordered_query = TRUE,
                significant = TRUE,
                user_threshold = 0.005,
                correction_method = "gSCS")

gostres$result %>% select(term_name, term_id, source, everything())
```

```{r}
gostplot(gostres, capped = FALSE, interactive = TRUE)
```

### (GVC ∩ Agora) ∪ (GVC ∩ OpenTargets) ∪ (Agora ∩ OpenTargets)

```{r}
genes <- p %>% 
  filter(..set.. %in% c("GVC∩Agora∩OpenTargets", "(GVC∩Agora)∖(OpenTargets)", "(GVC∩OpenTargets)∖(Agora)", "(Agora∩OpenTargets)∖(GVC)")) %>%
  unnest(..values..) %>%
  select(gene_id = ..values..) %>%
  left_join(ago, by = join_by(gene_id == ensembl_gene_id)) %>% 
  left_join(otensg, by = join_by(gene_id == ensembl_gene_id)) %>% 
  sample_frac(1L) %>% # randomize row order before arranging
  select(gene_id, symbol, genetics_score, otGeneticsPortal, globalScore, target_risk_score, multi_omics_score) %>%
  arrange(desc(genetics_score), desc(otGeneticsPortal))

genes
```

```{r}
query <- genes %>% distinct(gene_id) %>% pull(gene_id)

gostres <- gost(query = query,
                organism = "hsapiens",
                domain_scope = "annotated",
                exclude_iea = TRUE,
                ordered_query = TRUE,
                significant = TRUE,
                user_threshold = 0.005,
                correction_method = "gSCS")

gostres$result %>% select(term_name, term_id, source, everything())
```

```{r}
gostplot(gostres, capped = FALSE, interactive = TRUE)
```

### (Agora ∩ OpenTargets) ∖ (GVC)

```{r}
genes <- p %>%
  filter(..set.. == "(Agora∩OpenTargets)∖(GVC)") %>% 
  unnest(..values..) %>%
  select(gene_id = ..values..) %>%
  left_join(ago, by = join_by(gene_id == ensembl_gene_id)) %>% 
  left_join(otensg, by = join_by(gene_id == ensembl_gene_id)) %>% 
  sample_frac(1L) %>% # randomize row order before arranging
  select(gene_id, symbol, genetics_score, otGeneticsPortal, globalScore, target_risk_score, multi_omics_score) %>%
  arrange(desc(genetics_score), desc(otGeneticsPortal))

genes
```

```{r}
query <- genes %>% distinct(gene_id) %>% pull(gene_id)

gostres <- gost(query = query,
                organism = "hsapiens",
                domain_scope = "annotated",
                exclude_iea = TRUE,
                ordered_query = TRUE,
                significant = TRUE,
                user_threshold = 0.005,
                correction_method = "gSCS")

gostres$result %>% select(term_name, term_id, source, everything())
```

```{r}
gostplot(gostres, capped = FALSE, interactive = TRUE)
```

### (GVC ∩ OpenTargets) ∖ (Agora)

```{r}
genes <- p %>%
  filter(..set.. == "(GVC∩OpenTargets)∖(Agora)") %>% 
  unnest(..values..) %>%
  select(gene_id = ..values..) %>%
  left_join(ago, by = join_by(gene_id == ensembl_gene_id)) %>% 
  left_join(otensg, by = join_by(gene_id == ensembl_gene_id)) %>% 
  sample_frac(1L) %>% # randomize row order before arranging
  select(gene_id, symbol, genetics_score, otGeneticsPortal, globalScore, target_risk_score, multi_omics_score) %>%
  arrange(desc(genetics_score), desc(otGeneticsPortal))

genes
```

```{r}
query <- genes %>% distinct(gene_id) %>% pull(gene_id)

gostres <- gost(query = query,
                organism = "hsapiens",
                domain_scope = "annotated",
                exclude_iea = TRUE,
                ordered_query = TRUE,
                significant = TRUE,
                user_threshold = 0.005,
                correction_method = "gSCS")

gostres$result %>% select(term_name, term_id, source, everything())
```

```{r}
gostplot(gostres, capped = FALSE, interactive = TRUE)
```

### (OpenTargets) ∖ (GVC ∪ Agora)

```{r}
genes <- p %>%
  filter(..set.. == "(OpenTargets)∖(GVC∪Agora)") %>% 
  unnest(..values..) %>%
  select(gene_id = ..values..) %>%
  left_join(ago, by = join_by(gene_id == ensembl_gene_id)) %>% 
  left_join(otensg, by = join_by(gene_id == ensembl_gene_id)) %>% 
  sample_frac(1L) %>% # randomize row order before arranging
  select(gene_id, symbol, genetics_score, otGeneticsPortal, globalScore, target_risk_score, multi_omics_score) %>%
  arrange(desc(genetics_score), desc(otGeneticsPortal))

genes
```

```{r}
query <- genes %>% distinct(gene_id) %>% pull(gene_id)

gostres <- gost(query = query,
                organism = "hsapiens",
                domain_scope = "annotated",
                exclude_iea = TRUE,
                ordered_query = TRUE,
                significant = TRUE,
                user_threshold = 0.005,
                correction_method = "gSCS")

gostres$result %>% select(term_name, term_id, source, everything())
```

```{r}
gostplot(gostres, capped = FALSE, interactive = TRUE)
```

### (GVC ∩ Agora) ∖ (OpenTargets)

```{r}
genes <- p %>%
  filter(..set.. == "(GVC∩Agora)∖(OpenTargets)") %>% 
  unnest(..values..) %>%
  select(gene_id = ..values..) %>%
  left_join(ago, by = join_by(gene_id == ensembl_gene_id)) %>% 
  left_join(otensg, by = join_by(gene_id == ensembl_gene_id)) %>% 
  sample_frac(1L) %>% # randomize row order before arranging
  select(gene_id, symbol, genetics_score, otGeneticsPortal, globalScore, target_risk_score, multi_omics_score) %>%
  arrange(desc(genetics_score), desc(otGeneticsPortal))

genes
```

```{r}
query <- genes %>% distinct(gene_id) %>% pull(gene_id)

gostres <- gost(query = query,
                organism = "hsapiens",
                domain_scope = "annotated",
                exclude_iea = TRUE,
                ordered_query = TRUE,
                significant = TRUE,
                user_threshold = 0.005,
                correction_method = "gSCS")

gostres$result %>% select(term_name, term_id, source, everything())
```

```{r}
gostplot(gostres, capped = FALSE, interactive = TRUE)
```

### (Agora) ∖ (GVC ∪ OpenTargets)

```{r}
genes <- p %>%
  filter(..set.. == "(Agora)∖(GVC∪OpenTargets)") %>% 
  unnest(..values..) %>%
  select(gene_id = ..values..) %>%
  left_join(ago, by = join_by(gene_id == ensembl_gene_id)) %>% 
  left_join(otensg, by = join_by(gene_id == ensembl_gene_id)) %>% 
  sample_frac(1L) %>% # randomize row order before arranging
  select(gene_id, symbol, genetics_score, otGeneticsPortal, globalScore, target_risk_score, multi_omics_score) %>%
  arrange(desc(genetics_score), desc(otGeneticsPortal))

genes
```

```{r}
query <- genes %>% distinct(gene_id) %>% pull(gene_id)

gostres <- gost(query = query,
                organism = "hsapiens",
                domain_scope = "annotated",
                exclude_iea = TRUE,
                ordered_query = TRUE,
                significant = TRUE,
                user_threshold = 0.005,
                correction_method = "gSCS")

gostres$result %>% select(term_name, term_id, source, everything())
```

```{r}
gostplot(gostres, capped = FALSE, interactive = TRUE)
```

### (GVC) ∖ (Agora ∪ OpenTargets)

```{r}
genes <- p %>%
  filter(..set.. == "(GVC)∖(Agora∪OpenTargets)") %>% 
  unnest(..values..) %>%
  select(gene_id = ..values..) %>%
  left_join(ago, by = join_by(gene_id == ensembl_gene_id)) %>% 
  left_join(otensg, by = join_by(gene_id == ensembl_gene_id)) %>% 
  sample_frac(1L) %>% # randomize row order before arranging
  select(gene_id, symbol, genetics_score, otGeneticsPortal, globalScore, target_risk_score, multi_omics_score) %>%
  arrange(desc(genetics_score), desc(otGeneticsPortal))

genes
```

```{r}
query <- genes %>% distinct(gene_id) %>% pull(gene_id)

gostres <- gost(query = query,
                organism = "hsapiens",
                domain_scope = "annotated",
                exclude_iea = TRUE,
                ordered_query = TRUE,
                significant = TRUE,
                user_threshold = 0.005,
                correction_method = "gSCS")

gostres$result %>% select(term_name, term_id, source, everything())
```

```{r}
gostplot(gostres, capped = FALSE, interactive = TRUE)
```

## ORA of GVC genes sorted by Agora or OpenTargets scores

### GVC genes sorted by Agora's `genetics_score`

Arrange by Agora's `genetics_score` and OpenTargets' `otGeneticsPortal`:

```{r}
d1 <- gvc.genes %>%
  left_join(ago, by = join_by(gene_id == ensembl_gene_id)) %>% 
  left_join(otensg, by = join_by(gene_id == ensembl_gene_id)) %>% 
  sample_frac(1L) %>% # randomize row order before arranging
  arrange(desc(genetics_score), desc(otGeneticsPortal), desc(target_risk_score), desc(globalScore)) %>% 
  select(-c(symbol, hgnc_symbol)) %>% 
  select(gene_id, gene_symbol, genetics_score, otGeneticsPortal, everything())

d1
```

```{r}
query <- d1 %>% distinct(gene_id) %>% pull(gene_id)

gostres <- gost(query = query,
                organism = "hsapiens",
                domain_scope = "annotated",
                exclude_iea = TRUE,
                ordered_query = TRUE,
                significant = TRUE,
                user_threshold = 0.005,
                correction_method = "gSCS")

gostres$result %>% select(term_name, term_id, source, everything())
```

```{r}
gostplot(gostres, capped = FALSE, interactive = TRUE)
```

### GVC genes sorted by OpenTargets' `otGeneticsPortal`

Arrange by OpenTargets' `otGeneticsPortal` and Agora's `genetics_score`:

```{r}
d2 <- gvc.genes %>%
  left_join(ago, by = join_by(gene_id == ensembl_gene_id)) %>% 
  left_join(otensg, by = join_by(gene_id == ensembl_gene_id)) %>% 
  sample_frac(1L) %>% # randomize row order before arranging
  arrange(desc(otGeneticsPortal), desc(genetics_score), desc(globalScore), desc(target_risk_score)) %>%
  select(-c(symbol, hgnc_symbol)) %>% 
  select(gene_id, gene_symbol, otGeneticsPortal, genetics_score, everything())

d2
```

```{r}
query <- d2 %>% distinct(gene_id) %>% pull(gene_id)

gostres <- gost(query = query,
                organism = "hsapiens",
                domain_scope = "annotated",
                exclude_iea = TRUE,
                ordered_query = TRUE,
                significant = TRUE,
                user_threshold = 0.005,
                correction_method = "gSCS")

gostres$result %>% select(term_name, term_id, source, everything())
```

```{r}
gostplot(gostres, capped = FALSE, interactive = TRUE)
```

### GVC genes sorted by Agora's `target_risk_score`

Arrange by Agora's `target_risk_score` and OpenTargets' `globalScore`:

```{r}
d3 <- gvc.genes %>%
  left_join(ago, by = join_by(gene_id == ensembl_gene_id)) %>% 
  left_join(otensg, by = join_by(gene_id == ensembl_gene_id)) %>% 
  sample_frac(1L) %>% # randomize row order before arranging
  arrange(desc(target_risk_score), desc(globalScore)) %>% 
  select(-c(symbol, hgnc_symbol)) %>% 
  select(gene_id, gene_symbol, target_risk_score, globalScore, everything())

d3
```

```{r}
query <- d3 %>% distinct(gene_id) %>% pull(gene_id)

gostres <- gost(query = query,
                organism = "hsapiens",
                domain_scope = "annotated",
                exclude_iea = TRUE,
                ordered_query = TRUE,
                significant = TRUE,
                user_threshold = 0.005,
                correction_method = "gSCS")

gostres$result %>% select(term_name, term_id, source, everything())
```

```{r}
gostplot(gostres, capped = FALSE, interactive = TRUE)
```

### GVC genes sorted by OpenTargets' `globalScore`

Arrange by OpenTargets' `globalScore` and Agora's `target_risk_score`:

```{r}
d4 <- gvc.genes %>%
  left_join(ago, by = join_by(gene_id == ensembl_gene_id)) %>% 
  left_join(otensg, by = join_by(gene_id == ensembl_gene_id)) %>% 
  sample_frac(1L) %>% # randomize row order before arranging
  arrange(desc(globalScore), desc(target_risk_score)) %>% 
  select(-c(symbol, hgnc_symbol)) %>% 
  select(gene_id, gene_symbol, globalScore, target_risk_score, everything())

d4
```

```{r}
query <- d4 %>% distinct(gene_id) %>% pull(gene_id)

gostres <- gost(query = query,
                organism = "hsapiens",
                domain_scope = "annotated",
                exclude_iea = TRUE,
                ordered_query = TRUE,
                significant = TRUE,
                user_threshold = 0.005,
                correction_method = "gSCS")

gostres$result %>% select(term_name, term_id, source, everything())
```

```{r}
gostplot(gostres, capped = FALSE, interactive = TRUE)
```

## ORA of Agora and OpenTargets genes sorted by global or genetic score

### Agora genes sorted by `genetics_score`

```{r}
d5 <- ago %>%
  drop_na(genetics_score) %>%
  sample_frac(1L) %>% # randomize row order before arranging
  arrange(desc(genetics_score))

d5
```

```{r}
query <- d5 %>% distinct(ensembl_gene_id) %>% pull(ensembl_gene_id)

gostres <- gost(query = query,
                organism = "hsapiens",
                domain_scope = "annotated",
                exclude_iea = TRUE,
                ordered_query = TRUE,
                significant = TRUE,
                user_threshold = 0.005,
                correction_method = "gSCS")

gostres$result %>% select(term_name, term_id, source, everything())
```

```{r}
gostplot(gostres, capped = FALSE, interactive = TRUE)
```

### Agora genes sorted by `target_risk_score`

```{r}
d6 <- ago %>%
  drop_na(target_risk_score) %>%
  sample_frac(1L) %>% # randomize row order before arranging
  arrange(desc(target_risk_score))

d6
```

```{r}
query <- d6 %>% distinct(ensembl_gene_id) %>% pull(ensembl_gene_id)

gostres <- gost(query = query,
                organism = "hsapiens",
                domain_scope = "annotated",
                exclude_iea = TRUE,
                ordered_query = TRUE,
                significant = TRUE,
                user_threshold = 0.005,
                correction_method = "gSCS")

gostres$result %>% select(term_name, term_id, source, everything())
```

```{r}
gostplot(gostres, capped = FALSE, interactive = TRUE)
```

### Agora genes sorted by `multi_omics_score`

```{r}
d7 <- ago %>%
  drop_na(multi_omics_score) %>%
  sample_frac(1L) %>% # randomize row order before arranging
  arrange(desc(multi_omics_score))

d7
```

```{r}
query <- d7 %>% distinct(ensembl_gene_id) %>% pull(ensembl_gene_id)

gostres <- gost(query = query,
                organism = "hsapiens",
                domain_scope = "annotated",
                exclude_iea = TRUE,
                ordered_query = TRUE,
                significant = TRUE,
                user_threshold = 0.005,
                correction_method = "gSCS")

gostres$result %>% select(term_name, term_id, source, everything())
```

```{r}
gostplot(gostres, capped = FALSE, interactive = TRUE)
```

### OpenTargets genes sorted by `otGeneticsPortal`

```{r}
d8 <- otensg %>%
  drop_na(otGeneticsPortal) %>%
  sample_frac(1L) %>% # randomize row order before arranging
  arrange(desc(otGeneticsPortal))

d8
```

```{r}
query <- d8 %>% distinct(ensembl_gene_id) %>% pull(ensembl_gene_id)

gostres <- gost(query = query,
                organism = "hsapiens",
                domain_scope = "annotated",
                exclude_iea = TRUE,
                ordered_query = TRUE,
                significant = TRUE,
                user_threshold = 0.005,
                correction_method = "gSCS")

gostres$result %>% select(term_name, term_id, source, everything())
```

```{r}
gostplot(gostres, capped = FALSE, interactive = TRUE)
```

### OpenTargets genes sorted by `globalScore`

```{r}
d9 <- otensg %>%
  drop_na(globalScore) %>%
  sample_frac(1L) %>% # randomize row order before arranging
  arrange(desc(globalScore))

d9
```

```{r}
query <- d9 %>% distinct(ensembl_gene_id) %>% pull(ensembl_gene_id)

gostres <- gost(query = query,
                organism = "hsapiens",
                domain_scope = "annotated",
                exclude_iea = TRUE,
                ordered_query = TRUE,
                significant = TRUE,
                user_threshold = 0.005,
                correction_method = "gSCS")

gostres$result %>% select(term_name, term_id, source, everything())
```

```{r}
gostplot(gostres, capped = FALSE, interactive = TRUE)
```

## ORA of GVC genes in table from manuscript

```{r}
d10 <- read_xlsx("2024-08-29_GVC Table 1C - WORKING COPY.xlsx", sheet = "PG Gene List", skip = 1)
  
d10 %>% arrange(`PG RANK`)
```

```{r}
query <-
  d10 %>%
  rename(gene = `GVC expanded list of possible genes (500kb)`, rank = `PG RANK`) %>%
  bind_rows(tibble(gene = "APOE", rank = 0)) %>%
  arrange(rank) %>%
  distinct(gene) %>%
  pull(gene)

gostres <- gost(query = query,
                organism = "hsapiens",
                domain_scope = "annotated",
                exclude_iea = TRUE,
                ordered_query = FALSE, # <- UNORDERED QUERY!
                significant = TRUE,
                user_threshold = 0.005,
                correction_method = "gSCS")

gostres$result %>% select(term_name, term_id, source, everything())
```

```{r}
gostplot(gostres, capped = FALSE, interactive = TRUE)
```

## Check missing OpenTargets scores in table from manuscript

```{r}
t <- read_xlsx("8-23-2024 - GVC Table 1C - WORKING COPYL_MRC.xlsx", skip = 1, na = "No data") |> janitor::clean_names() |> select(gvc_expanded_list_of_possible_genes_500kb, open_target_scores_global, open_target_scores_genetics) |> rename(symbol = gvc_expanded_list_of_possible_genes_500kb)
```

```{r}
t |>
  left_join(ot, by = "symbol") |>
  filter(round(open_target_scores_global, 4) != round(globalScore, 4)) |> 
  select(symbol, open_target_scores_global, globalScore)
```

```{r}
t |>
  left_join(ot, by = "symbol") |>
  filter(round(open_target_scores_genetics, 4) != round(otGeneticsPortal, 4)) |> 
  select(symbol, open_target_scores_genetics, otGeneticsPortal)
```

## GVC loci annotated with genes in overlaps

### GVC ∩ Agora ∩ OpenTargets

```{r}
gene_ids <- p %>% 
  filter(..set.. == "GVC∩Agora∩OpenTargets") %>%
  unnest(..values..) %>%
  select(gene_id = ..values..) %>%
  left_join(ago, by = join_by(gene_id == ensembl_gene_id)) %>% 
  left_join(otensg, by = join_by(gene_id == ensembl_gene_id)) %>%
  distinct(gene_id) %>%
  pull(gene_id)

length(gene_ids)
```

```{r}
gvc %>%
  filter(gene_id %in% gene_ids) %>%
  select(gvc_locus = grouped_loci_gvc, gene_id, gene_symbol) %>%
  arrange(gene_symbol) %>%
  mutate(gene = gene_symbol) %>%
  # unite(gene, gene_id, gene_symbol, sep = ":", remove = FALSE) %>%
  distinct(gvc_locus, gene, .keep_all = TRUE) %>%
  group_by(gvc_locus) %>%
  summarize(genes = str_c(gene, collapse = " | ")) %>%
  select(gvc_locus, genes) %>%
  gt::gt()
```

## Methods for manuscript

**Phase 2. Pathway analysis of GVC, Agora and OpenTargets candidate AD genes.** We conducted gene set over-representation analysis (ORA) of GVC, Agora and OpenTargets candidate AD gene lists using R\[37\] with the `gprofiler2` package (see [https://github.com/marcoralab/gvc_agora_opentargets](https://github.com/marcoralab/gvc_agora_opentargets.ora)), excluding electronic Gene Ontology (GO) annotations, and filtering results using a p-value significance threshold of 0.005 after multiple testing correction with the g:SCS algorithm.

We used the GVC gene list of 1,344 genes in the proximity of AD risk loci that we built as described above. We retrieved Agora’s gene list of Alzheimer’s disease nominated targets (site version 3.4.0; data version syn13363290-v68) from <https://agora.adknowledgeportal.org/genes/nominated-targets> and the Agora’s gene scores (data version syn25741025-v12) from <https://www.synapse.org/Synapse:syn25741025> on October 24th 2024. We retrieved OpenTargets’ gene list of Alzheimer’s disease (EFO:MONDO_0004975) associated targets (data version v24_09) from <https://platform.opentargets.org/disease/MONDO_0004975/associations> on October 24th 2024.

We conducted ORA using the following candidate AD gene lists: 1) Agora’s gene list of Alzheimer’s disease nominated targets decreasingly ordered by Agora’s genetics, multi-omics, or target risk score; 2) OpenTargets’ gene list of Alzheimer’s disease associated targets decreasingly ordered by OpenTargets’ genetics portal or global score; 3) GVC gene list decreasingly ordered by the aforementioned Agora’s or OpenTargets’ scores; 4) lists corresponding to regions of the Venn diagram built using R\[37\] with the `VennDiagram` package (see <https://github.com/marcoralab/gvc_agora_opentargets>) and three sets corresponding to gene lists 1-3, decreasingly ordered by the aforementioned Agora’s or OpenTargets’ scores.

## Print environment

```{r}
sessioninfo::session_info()
```
